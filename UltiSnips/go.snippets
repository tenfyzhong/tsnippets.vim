# Snippets for Go 
priority 10

snippet : "name := value" b
${1:name} := ${2:value}
endsnippet

snippet [] "[]type{}" w
[]${1:type}{}
endsnippet

snippet /^imp/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet ch "Chan declaration" w
chan ${1:type}
endsnippet

snippet st "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet stn "Struct and new function" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}

func New$1() *$1 {
	return &$1{}
}
endsnippet

snippet in "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet new "new statement" w
new(${1:type})
endsnippet

snippet de "defer statement" w
defer ${1:func}
endsnippet

snippet /^init/ "Init function" r
func init() {
	$0
}
endsnippet

snippet sel "Select statement" b
select {
case $1:
	$2
default:
	$0
}
endsnippet

snippet swi "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
}
endsnippet

snippet case "Case statement" b
case $1:
	$0
endsnippet

snippet for "For loop" b
for ${1:condition} {
	$0
}
endsnippet

snippet forr "For range" b
for ${1:_}, ${2:item} := range ${3:items} {
	$0
}
endsnippet

snippet fori "For i..n" b
for i:=${1:0}; i<${2:n}; i++ {
	$0
}
endsnippet

snippet forc "For chan" b
for ${1:i} := range ${2:c} {
	$0
}
endsnippet

snippet fors "For select" b
for {
	select {
	case ${1:c}:
		$2
	default:
		$0
	}
}
endsnippet

snippet ife "if ... else ..." b
if ${1:condition} {
	$2
} else {
	$0
}
endsnippet

snippet ap "append" b
$1 = append(${1:slice}, ${2:variable})
endsnippet

snippet del "delete" b
delete(${1:map}, ${2:key})
endsnippet

snippet ctxt "context.WithTimeout" b
${1:ctx}, ${2:cancel} := context.WithTimeout(context.Background(), ${3:1000}*time.${4:Millisecond})
defer $2()
endsnippet

# make
snippet ms "make slice" w
make([]${1:string}, ${2:0}, ${3:0})
endsnippet

snippet mm "make map" w
make(map[${1:string}]${2:string}, ${3:0})
endsnippet

snippet mc "make chan" w
make(chan ${1:type}, ${2:size})
endsnippet

snippet mc0 "make unbuffered chan" w
make(chan ${1:type})
endsnippet

# field
snippet bson "BSON field" w
\`bson:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet xml "XML field" w
\`xml:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet yaml "YAML field" w
\`yaml:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet cql "CQL field" w
\`cql:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet env "env field" w
\`env:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet json "json field" w
\`json:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`},omitempty"\`$0
endsnippet

snippet xorm "xorm field" w
\`xorm:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet testing "testing parameter" w
t *testing.T
endsnippet

snippet marshal "Marshal" w
${1:data}, ${2:err} := ${3:json}.Marshal(${4:st})
if $2 != nil {
	$0
}
endsnippet

snippet unmarshal "Unmarshal" w
${1:st} := &${2:Struct}{}
${3:err} := ${4:json}.Unmarshal(${5:data}, $1)
if err != nil {
	$0
}
endsnippet

############################## fmt ##############################
snippet fsf "fmt.Sprintf" w
fmt.Sprintf("$1", $2)
endsnippet

snippet fpf "fmt.Printf" w
fmt.Printf("$1\n", $2)
endsnippet

snippet fef "fmt.Errorf" w
fmt.Errorf("$1", $2)
endsnippet

############################## testing ##############################
snippet funct "testing function" b
func Test${1:Func}(t *testing.T) {
	$0
}
endsnippet

snippet funcb "benchmark testing function" b
func Benchmark${1:Func}(b *testing.B) {
	// b.ResetTimer()
	for i := 0; i < b.N; i++ {
		$0
	}
}
endsnippet

snippet gomock "gomock.NewController"
ctrl := gomock.NewController(t)
defer ctrl.Finish()


endsnippet

snippet httptests "httptest.NewServer" w
httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
	$0
}))
endsnippet

snippet gmtc "gomock test case"
{
	name: "${1:test name}",
	init: func(ctrl *gomock.Controller) ${2:Receiver} {
		$3
	},
	args: func(t *gomock.Controller) args{
		return args{
			$4
		}
	},
	want1: ${5:want1},
	wantErr: ${6:true},
	inspectErr: func(err error, t *testing.T) {
		$7
	},
}, // $1
endsnippet

############################## assert ##############################
snippet asseq "assert.Equal" b
assert.Equal(t, ${1:excepted}, ${2:actual}, "$2 == $1")
endsnippet

snippet assemp "assert.Empty" b
assert.Empty(t, ${1:object}, "$1 should be empty")
endsnippet

snippet assnemp "assert.NotEmpty" b
assert.NotEmpty(t, ${1:object}, "$1 should not be empty")
endsnippet

snippet asserr "assert.Error" b
assert.Error(t, ${1:err}, "$1 != nil")
endsnippet

snippet assnerr "assert.NoError" b
assert.NoError(t, ${1:err}, "$1 == nil")
endsnippet

snippet assee "assert.ErrorEqual" b
assert.EqualError(t, ${1:err}, "${2:errstr}", "$1.Error() == \`$2\`")
endsnippet

snippet assfe "assert.False" b
assert.False(t, ${1:value}, "$1 == false")
endsnippet

snippet asstr "assert.True" b
assert.True(t, ${1:value}, "$1 == true")
endsnippet

snippet assnil "assert.Nil" b
assert.Nil(t, ${1:object}, "$1 == nil")
endsnippet

snippet assnnil "assert.NotNil" b
assert.NotNil(t, ${1:object}, "$1 != nil")
endsnippet

snippet ass0 "assert.Zero" b
assert.Zero(t, ${1:object})
endsnippet

snippet assn0 "assert.NotZero" b
assert.NotZero(t, ${1:object})
endsnippet

############################## mocket ##############################
snippet mocket "mocket WithQuery" b
mocket.Catcher.Reset().NewMock().WithQuery(\`${1:sql}\`).${2:WithReply}(${3:reply})
endsnippet

############################## redigo ##############################
snippet redigopool "new redisgo pool"
pool := &redis.Pool{
	MaxIdle:     ${1:8},
	IdleTimeout: ${2:300} * ${3:time.Second},
}
pool.Dial = func() (redis.Conn, error) {
	c, err := redis.Dial(
		"tcp",
		${4:"127.0.0.1:6379"},
		redis.DialConnectTimeout(${5:1}*time.Second),
		redis.DialReadTimeout(${6:1}*time.Second),
		redis.DialWriteTimeout(${7:1}*time.Second),
		redis.DialPassword(${8:"password"}),
		redis.DialDatabase(${9:0}))
	if err != nil {
		return nil, err
	}
	return c, err
}
pool.TestOnBorrow = func(c redis.Conn, t time.Time) error {
	_, err := c.Do("Ping")
	return err
}
endsnippet

snippet redigodo "redigo do" b
${1:c} := ${2:pool}.Get()
defer $1.Close
${3:data}, ${4:err} := redis.${5:Bytes}($1.Do("${6:GET}", ${7:"foo"}))
if $4 != nil {
	$8
}

$0

endsnippet

snippet redigomulti "redigo MULTI"
${1:c} := ${2:pool}.Get()
defer $1.Close
$1.Send("MULTI")
${3:data}, ${4:err} := $1.Do("EXEC")
if $4 != nil {
	$5
}

$0
endsnippet

############################## gorm ##############################
snippet gormopen "gorm.Open" b
${1:db}, err := gorm.Open(${2:"mysql"}, ${3:uri})
if err != nil {
	${4}
}
$1.DB().SetMaxIdleConns(${5:3})
$1.DB().SetMaxOpenConns(${6:10})
$1.DB().SetConnMaxLifetime(${7:3000} * time.Millisecond)
$1.LogMode(false)
endsnippet

snippet gormtx "gorm transaction" b
ctx, cancel := context.WithTimeout(context.Background(), ${1:1000} * time.Millisecond)
defer cancel()
c := db.BeginTx(ctx, &sql.TxOptions{})
$0

if c.Error != nil {
	c.Rollback()
} else {
	c.Commit()
}
endsnippet

############################## xorm ##############################
snippet xormne "xorn.NewEngine" b
${1:engine}, err := xorm.NewEngine(${2:"mysql"}, ${3:uri})
if err != nil {
	${4}
}
$1.DB().SetMaxIdleConns(${5:3})
$1.DB().SetMaxOpenConns(${6:10})
$1.DB().SetConnMaxLifetime(${7:3000} * time.Millisecond)
engine.SetLogLevel(${8:log.LOG_INFO})
endsnippet

############################## http ##############################
snippet httpclient "new http chlent" b
${1:httpClient} := &http.Client{
	Transport: &http.Transport{
		MaxIdleConnsPerHost: ${2:100},
		MaxIdleConns: ${3:10},
		TLSClientConfig: &tls.Config{
			InsecureSkipVerify: ${4:true},
		},
	},
	Timeout: time.Duration(${5:1000}) * time.Millisecond,
}
endsnippet

snippet httpget "http get json" b
v := url.Values{}
v.Add(${1:"key"}, ${2:"value"})
query := v.Encode()
url := ${3:"http://localhost:8080"} + "?" + query
resp, err := ${4:http}.Get(url)
if err != nil {
	${5:return err}
}
defer resp.Body.Close()

if resp.StatusCode != http.StatusOK {
	${6:return fmt.Errorf("status code: %d", resp.StatusCode)}
}

body, err := ioutil.ReadAll(resp.Body)
if err != nil {
	${7:return err}
}

${8:rsp} := ${9:&Response{}}
err = json.Unmarshal(body, rsp)
if err != nil {
	${10:return err}
}
endsnippet


snippet httppostj "http post json" b
url := ${1:"http://localhost:8080"}
req := ${2:&Request{}}
body, err := json.Marshal(req)
if err != nil {
	${3:return err}
}

resp, err := ${4:http}.Post(url, "application/json", bytes.NewReader(body))
if err != nil {
	${5:return err}
}
defer resp.Body.Close()

body, err := ioutil.ReadAll(resp.Body)
if err != nil {
	${6:return err}
}

${7:rsp} := ${8:&Response{}}
err = json.Unmarshal(body, rsp)
if err != nil {
	${9:return err}
}
endsnippet

snippet httppostf "http post form" b
v := url.Values{}
v.Add(${1:"key"}, ${2:"value"})
url := ${3:"http://localhost:8080"}
resp, err := ${4:http}.PostForm(url, v)

if err != nil {
	${5:return err}
}
defer resp.Body.Close()

body, err := ioutil.ReadAll(resp.Body)
if err != nil {
	${6:return err}
}

${7:rsp} := ${8:&Response{}}
err = json.Unmarshal(body, rsp)
if err != nil {
	${9:return err}
}
endsnippet

############################## extends ##############################
priority 20
extends gfgo
