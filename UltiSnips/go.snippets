# Snippets for Go 

snippet : "name := value" b
${1:name} := ${2:value}
endsnippet

snippet [] "[]type{}" w
[]${1:type}{}
endsnippet

snippet /^imp/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet ch "Chan declaration" w
chan ${1:type}
endsnippet

snippet st "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet stn "Struct and new function" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}

func New$1() *$1 {
	return &$1{}
}
endsnippet

snippet in "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet new "new statement" w
new(${1:type})
endsnippet

snippet de "defer statement" w
defer ${1:func}
endsnippet

snippet /^init/ "Init function" r
func init() {
	$0
}
endsnippet

snippet sel "Select statement" b
select {
case $1:
	$2
default:
	$0
}
endsnippet

snippet swi "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
}
endsnippet

snippet case "Case statement" b
case $1:
	$0
endsnippet

snippet for "For loop" b
for ${1:condition} {
	$0
}
endsnippet

snippet forr "For range" b
for ${1:_}, ${2:item} := range ${3:items} {
	$0
}
endsnippet

snippet fori "For i..n" b
for i:=${1:0}; i<${2:n}; i++ {
	$0
}
endsnippet

snippet ife "if ... else ..." b
if ${1:condition} {
	$2
} else {
	$0
}
endsnippet

snippet ap "append" b
$1 = append(${1:slice}, ${2:variable})
endsnippet

snippet del "delete" b
delete(${1:map}, ${2:key})
endsnippet

snippet ctxt "context.WithTimeout" b
${1:ctx}, ${2:cancel} := context.WithTimeout(context.Background(), ${3:1000}*time.${4:Millisecond})
defer $2()
endsnippet

# make
snippet ms "make slice" w
make([]${1:string}, ${2:0}, ${3:0})
endsnippet

snippet mm "make map" w
make(map[${1:string}]${2:string}, ${3:0})
endsnippet

snippet mc "make chan" w
make(chan ${1:type}, ${2:size})
endsnippet

snippet mc0 "make unbuffered chan" w
make(chan ${1:type})
endsnippet

# field
snippet bson "BSON field" w
\`bson:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet xml "XML field" w
\`xml:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet yaml "YAML field" w
\`yaml:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet cql "CQL field" w
\`cql:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet env "env field" w
\`env:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`}"\`$0
endsnippet

snippet json "json field" w
\`json:"${1:`!v substitute(getline('.'), '\W*\(\w*\).*', '\L\1', 'g')`},omitempty"\`$0
endsnippet

snippet testing "testing parameter" w
t *testing.T
endsnippet

############################## fmt ##############################
snippet fsf "fmt.Sprintf" w
fmt.Sprintf("$1", $2)
endsnippet

snippet fpf "fmt.Printf" w
fmt.Printf("$1\n", $2)
endsnippet

snippet fef "fmt.Errorf" w
fmt.Errorf("$1", $2)
endsnippet

############################## testing ##############################
snippet funct "testing function" b
func Test${1:Func}(t *testing.T) {
	$0
}
endsnippet

snippet gomock "gomock.NewController"
ctrl := gomock.NewController(t)
defer ctrl.Finish()


endsnippet

############################## assert ##############################
snippet asseq "assert.Equal" b
assert.Equal(t, ${1:excepted}, ${2:actual}, "$2 == $1")
endsnippet

snippet assemp "assert.Empty" b
assert.Empty(t, ${1:object}, "$1 should be empty")
endsnippet

snippet assnemp "assert.NotEmpty" b
assert.NotEmpty(t, ${1:object}, "$1 should not be empty")
endsnippet

snippet asserr "assert.Error" b
assert.Error(t, ${1:err}, "$1 != nil")
endsnippet

snippet assnerr "assert.NoError" b
assert.NoError(t, ${1:err}, "$1 == nil")
endsnippet

snippet assee "assert.ErrorEqual" b
assert.EqualError(t, ${1:err}, "${2:errstr}", "$1.Error() == \`$2\`")
endsnippet

snippet assfe "assert.False" b
assert.False(t, ${1:value}, "$1 == false")
endsnippet

snippet asstr "assert.True" b
assert.True(t, ${1:value}, "$1 == true")
endsnippet

snippet assnil "assert.Nil" b
assert.Nil(t, ${1:object}, "$1 == nil")
endsnippet

snippet assnnil "assert.NotNil" b
assert.NotNil(t, ${1:object}, "$1 != nil")
endsnippet

snippet ass0 "assert.Zero" b
assert.Zero(t, ${1:object})
endsnippet

snippet assn0 "assert.NotZero" b
assert.NotZero(t, ${1:object})
endsnippet

############################## mocket ##############################
snippet mocket "mocket WithQuery" b
mocket.Catcher.Reset().NewMock().WithQuery(\`${1:sql}\`).${2:WithReply}(${3:reply})
endsnippet

############################## gf ##############################
snippet err "Basic error handling" b
if err != nil {
	log.Error("$1 err: %v", err)
}
endsnippet

# log
snippet lve "log.Verbose" b
log.Verbose("$1", $2)
endsnippet

snippet lde "log.Debug" b
log.Debug("$1", $2)
endsnippet

snippet lin "log.Info" b
log.Info("$1", $2)
endsnippet

snippet lwa "log.Warn" b
log.Warn("$1", $2)
endsnippet

snippet ler "log.Error" b
log.Error("$1", $2)
endsnippet

snippet lfa "log.Fatal" b
log.Fatal("$1", $2)
endsnippet

# attr
snippet attr "stat.SetAttr" b
stat.SetAttr("${1:tag}", ${2:1})
endsnippet

snippet attrdb "stat.SetAttrDura begin" b
${1:begin} := stat.SetAttrDura("", 0)
endsnippet

snippet attrde "stat.SetAttrDura end" b
stat.SetAttrDura("${1:tag}", ${2:0})
endsnippet

snippet attrd "stat.SetAttrDura" b
${1:begin} := stat.SetAttrDura("", 0)
stat.SetAttrDura("${2:tag}", $1)
endsnippet

snippet attre "stat.SetAttr and log.Error"
stat.SetAttr("${1:tag}", ${2:1})
log.Error("$1, $3", $4)
endsnippet

snippet errs "Basic error handling" b
if err != nil {
	stat.SetAttr("${1:tag}", ${2:1})
	log.Error("$1, $3err: %v", err)
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	log.Verbose("func ${2/\*?(\w*)/$1/}.$3 begin")
	${0:${VISUAL}}
	log.Verbose("func ${2/\*?(\w*)/$1/}.$3 end")
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	log.Verbose("func $1 begin")
	${0:${VISUAL}}
	log.Verbose("func $1 end")
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	log.Verbose("func $1 begin")
	${0:${VISUAL}}
	log.Verbose("func $1 end")
}
endsnippet

snippet funcg "grpc handler" b
func (${1:receiver} *${2:type}) $4(ctx context.Context, req *${3:package}.${4:Handler}Req) (*$3.$4Rsp, error) {
	log.Verbose("func $2.$4 begin")
	stat.SetAttr("${4/\w*/\L$0\E/}.req", 1)
	if req == nil {
		log.Error("$2.$4 req is nil")
		stat.SetAttr("${4/\w*/\L$0\E/}.err.req_is_nil", 1)
		return nil, errors.New("req is nil")
	}
	begin := stat.SetAttrDura("", 0)
	log.Info("$2.$4 req: %+v", req)
	${0:${VISUAL}}
	cost := stat.SetAttrDura("${4/\w*/\L$0\E/}.cost.total", begin)
	stat.SetAttr("${4/\w*/\L$0\E/}.succ", 1)
	log.Info("func $2.$4 succ, cost: %d", cost)
	return &$3.$4Rsp{}, nil
}
endsnippet
