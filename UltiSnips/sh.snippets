priority 10

snippet getopt "getopt from argument"
usage() {
	echo "Usage: \$0 [OPTION]..."
	echo "-a, --along				option a"
	echo "-b bvalue, --blong=bvalue	option b"
	echo "-ccvalue, --clong=cvalue	option c"
}
# `:` indicate it has a required arguent, `::` # inidcate it has an optinal argument
# -o, --options shortopts
# -l, --longoptions longopts
# -n, --name progname
ARGS=$(getopt -o ${1:hab:c::} --long ${2:help,along,blong:,clong::} -n "\$0" -- "\$@")
if [ $? != 0 ]; then
	exit 1
fi
eval set -- "${ARGS}"

while true
do
	case "\$1" in
	-${3:a}|--${4:along})
		${5:echo "Option a"}
		shift
		;;
	-${6:b}|--${7:blong})
		b=\$2
		${8:echo "Option b, argument \$2"}
		shift 2
		;;
	-${9:c}|--${10:clong})
		case "\$2" in
		"")
			${11:echo "Option c, no argument"}
			;;
		*)
			c=\$2
			${12:echo "Option c, argument \$2"}
			;;
		esac
		shift 2
		;;
	-h|--help)
		usage
		exit 0
		;;
	--)
		shift
		break
		;;
	*)
		echo "\$0: invalid option -- '\$1'"
		echo "Try '\$0 --help' for more information"
		exit 1
		;;
	esac
done

args=$@
endsnippet

snippet getopts "getopts from argument"
usage() {
	echo "Usage: \$0 [OPTION]..."
	echo "-a, --along				option a"
	echo "-b bvalue, --blong=bvalue	option b"
}

# `:` before the option indicate ingore error
# `:` after the option indicate it has a argument
while getopts "${1::a:bh}" opt
do
	case \$opt in
	a)
		a=\$OPTARG
		echo "option a=\${a}"
		;;
	b)
		echo "option b"
		;;
	h)
		usage
		exit 0
		;;
	esac
done

# remove parsed arguments
shift $((OPTIND - 1))

args=$@
endsnippet
