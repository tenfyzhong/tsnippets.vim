priority 20

snippet err "Basic error handling" b
if err != nil {
	log.Error("$1 err: %v", err)
}
endsnippet

# log
snippet lve "log.Verbose" b
log.Verbose("$1", $2)
endsnippet

snippet lde "log.Debug" b
log.Debug("$1", $2)
endsnippet

snippet lin "log.Info" b
log.Info("$1", $2)
endsnippet

snippet lwa "log.Warn" b
log.Warn("$1", $2)
endsnippet

snippet ler "log.Error" b
log.Error("$1", $2)
endsnippet

snippet lfa "log.Fatal" b
log.Fatal("$1", $2)
endsnippet

# attr
snippet attr "stat.SetAttr" b
stat.SetAttr("${1:tag}", ${2:1})
endsnippet

snippet attrdb "stat.SetAttrDura begin" b
${1:begin} := stat.SetAttrDura("", 0)
endsnippet

snippet attrde "stat.SetAttrDura end" b
stat.SetAttrDura("${1:tag}", ${2:0})
endsnippet

snippet attrd "stat.SetAttrDura" b
${1:begin} := stat.SetAttrDura("", 0)
stat.SetAttrDura("${2:tag}", $1)
endsnippet

snippet attre "stat.SetAttr and log.Error"
stat.SetAttr("${1:tag}", ${2:1})
log.Error("$1, $3", $4)
endsnippet

snippet errs "Basic error handling" b
if err != nil {
	stat.SetAttr("${1:tag}", ${2:1})
	log.Error("$1, $3err: %v", err)
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	log.Verbose("func ${2/\*?(\w*)/$1/}.$3 begin")
	${0:${VISUAL}}
	log.Verbose("func ${2/\*?(\w*)/$1/}.$3 end")
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	log.Verbose("func $1 begin")
	${0:${VISUAL}}
	log.Verbose("func $1 end")
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(w http.ResponseWriter, r *http.Request) {
	log.Verbose("func $1 begin")
	stat.SetAttr("${1/\w*/\L$0\E/}.req", 1)
	begin := stat.SetAttrDura("", 0)

	err := r.ParseForm()
	if err != nil {
		log.Debug("parse from failed, err: %v", err)
		stat.SetAttr("${1/\w*/\L$0\E/}.err.parse_form", 1)
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	${0:${VISUAL}}

	cost := stat.SetAttrDura("${1/\w*/\L$0\E/}.cost.total", begin)
	stat.SetAttr("${1/\w*/\L$0\E/}.succ")
	log.Info("func $1 end, cost: %d", cost)
}
endsnippet

snippet funchj "HTTP handler, json" b
func ${1:handler}(w http.ResponseWriter, r *http.Request) {
	log.Verbose("func $1 begin")
	stat.SetAttr("${1/\w*/\L$0\E/}.req", 1)
	begin := stat.SetAttrDura("", 0)

	err := r.ParseForm()
	if err != nil {
		log.Debug("parse from failed, err: %v", err)
		stat.SetAttr("${1/\w*/\L$0\E/}.err.parse_form", 1)
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Debug("read request body, err: %v", err)
		stat.SetAttr("${1/\w*/\L$0\E/}.err.read_body", 1)
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	defer r.Body.Close()

	req := &$2{}
	err = json.Unmarshal(reqBody, req)
	if err != nil {
		log.Debug("unmarshal $2, err: %v", err)
		stat.SetAttr("${1/\w*/\L$0\E/}.err.unmarshal", 1)
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	if !check${1/\w*/\u$0/}Param(req) {
		log.Debug("bad request, req: %+v", req)
		stat.SetAttr("${1/\w*/\L$0\E/}.err.param", 1)
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	statusCode, rsp, err := do${1/\w*/\u$0/}(req)
	if err != nil {
		log.Error("do$1 err: %v", err)
		stat.SetAttr("${1/\w*/\L$0\E/}.err.do", 1)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	log.Info("doSign, status: %d, rsp: %v", statusCode, rsp)

	rspBody, err := json.Marshal(rsp)
	if err != nil {
		log.Error("marahsl $3, err: %v", err)
		stat.SetAttr("${1/\w*/\L$0\E/}.err.marshal", 1)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.WriteHeader(statusCode)
	_, err = w.Write(rspBody)
	if err != nil {
		log.Error("write response, err: %v", err)
		stat.SetAttr("${1/\w*/\L$0\E/}.err.write", 1)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	cost := stat.SetAttrDura("${1/\w*/\L$0\E/}.cost.total", begin)
	stat.SetAttr("${1/\w*/\L$0\E/}.succ", 1)
	log.Info("func $1 end, cost: %d", cost)
}

func check${1/\w*/\u$0/}Param(req *$2) bool {
	return ${4:false}
}

func do${1/\w*/\u$0/}(req *${2:Request}) (int, *${3:Response}, error) {
	log.Verbose("func do$1 begin")
	${0:${VISUAL}}
	log.Verbose("func do$1 end")
	return http.StatusOK, nil, nil
}
endsnippet

snippet funcg "grpc handler" b
func (${1:receiver} *${2:type}) $4(ctx context.Context, req *${3:package}.${4:Handler}Req) (*$3.$4Rsp, error) {
	log.Verbose("func $2.$4 begin")
	stat.SetAttr("${4/\w*/\L$0\E/}.req", 1)
	if req == nil {
		log.Error("$2.$4 req is nil")
		stat.SetAttr("${4/\w*/\L$0\E/}.err.req_is_nil", 1)
		return nil, errors.New("req is nil")
	}
	begin := stat.SetAttrDura("", 0)
	log.Info("$2.$4 req: %+v", req)

	// process
	${0:${VISUAL}}
	cost := stat.SetAttrDura("${4/\w*/\L$0\E/}.cost.total", begin)
	stat.SetAttr("${4/\w*/\L$0\E/}.succ", 1)
	log.Info("func $2.$4 succ, cost: %d", cost)
	return &$3.$4Rsp{}, nil
}
endsnippet
