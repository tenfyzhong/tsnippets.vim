priority 20

snippet err "Basic error handling" b
if err != nil {
	log.Error("$1 err: %v", err)
}
endsnippet

# log
snippet lve "log.Verbose" b
log.Verbose("$1", $2)
endsnippet

snippet lde "log.Debug" b
log.Debug("$1", $2)
endsnippet

snippet lin "log.Info" b
log.Info("$1", $2)
endsnippet

snippet lwa "log.Warn" b
log.Warn("$1", $2)
endsnippet

snippet ler "log.Error" b
log.Error("$1", $2)
endsnippet

snippet lfa "log.Fatal" b
log.Fatal("$1", $2)
endsnippet

# attr
snippet attr "stat.SetAttr" b
stat.SetAttr("${1:tag}", ${2:1})
endsnippet

snippet attrdb "stat.SetAttrDura begin" b
${1:begin} := stat.SetAttrDura("", 0)
endsnippet

snippet attrde "stat.SetAttrDura end" b
stat.SetAttrDura("${1:tag}", ${2:0})
endsnippet

snippet attrd "stat.SetAttrDura" b
${1:begin} := stat.SetAttrDura("", 0)
stat.SetAttrDura("${2:tag}", $1)
endsnippet

snippet attre "stat.SetAttr and log.Error"
stat.SetAttr("${1:tag}", ${2:1})
log.Error("$1, $3", $4)
endsnippet

snippet errs "Basic error handling" b
if err != nil {
	stat.SetAttr("${1:tag}", ${2:1})
	log.Error("$1, $3err: %v", err)
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	log.Verbose("func ${2/\*?(\w*)/$1/}.$3 begin")
	${0:${VISUAL}}
	log.Verbose("func ${2/\*?(\w*)/$1/}.$3 end")
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	log.Verbose("func $1 begin")
	${0:${VISUAL}}
	log.Verbose("func $1 end")
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	log.Verbose("func $1 begin")
	${0:${VISUAL}}
	log.Verbose("func $1 end")
}
endsnippet

snippet funcg "grpc handler" b
func (${1:receiver} *${2:type}) $4(ctx context.Context, req *${3:package}.${4:Handler}Req) (*$3.$4Rsp, error) {
	log.Verbose("func $2.$4 begin")
	stat.SetAttr("${4/\w*/\L$0\E/}.req", 1)
	if req == nil {
		log.Error("$2.$4 req is nil")
		stat.SetAttr("${4/\w*/\L$0\E/}.err.req_is_nil", 1)
		return nil, errors.New("req is nil")
	}
	begin := stat.SetAttrDura("", 0)
	log.Info("$2.$4 req: %+v", req)
	${0:${VISUAL}}
	cost := stat.SetAttrDura("${4/\w*/\L$0\E/}.cost.total", begin)
	stat.SetAttr("${4/\w*/\L$0\E/}.succ", 1)
	log.Info("func $2.$4 succ, cost: %d", cost)
	return &$3.$4Rsp{}, nil
}
endsnippet
