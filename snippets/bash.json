{
    "getopt": {
        "prefix": "getopt",
        "body": [
            "usage() {",
            "\techo \"Usage: \\$0 [OPTION]...\"",
            "\techo \"-a, --along\t\t\t\toption a\"",
            "\techo \"-b bvalue, --blong=bvalue\toption b\"",
            "\techo \"-ccvalue, --clong=cvalue\toption c\"",
            "\techo \"-h, --help\t\t\t\thelp\"",
            "}",
            "# `:` indicate it has a required arguent, `::` # inidcate it has an optinal argument",
            "# -o, --options shortopts",
            "# -l, --longoptions longopts",
            "# -n, --name progname",
            "ARGS=$(getopt -o ${1:hab:c::} --long ${2:help,along,blong:,clong::} -n \"\\$0\" -- \"\\$@\")",
            "if [ $? != 0 ]; then",
            "\texit 1",
            "fi",
            "eval set -- \"${ARGS}\"",
            "",
            "while true",
            "do",
            "\tcase \"\\$1\" in",
            "\t-${3:a}|--${4:along})",
            "\t\t${5:echo \"Option a\"}",
            "\t\tshift",
            "\t\t;;",
            "\t-${6:b}|--${7:blong})",
            "\t\tB=\\$2",
            "\t\t${8:echo \"Option b, argument \\$2\"}",
            "\t\tshift 2",
            "\t\t;;",
            "\t-${9:c}|--${10:clong})",
            "\t\tcase \"\\$2\" in",
            "\t\t\"\")",
            "\t\t\t${11:echo \"Option c, no argument\"}",
            "\t\t\t;;",
            "\t\t*)",
            "\t\t\tC=\\$2",
            "\t\t\t${12:echo \"Option c, argument \\$2\"}",
            "\t\t\t;;",
            "\t\tesac",
            "\t\tshift 2",
            "\t\t;;",
            "\t-h|--help)",
            "\t\tusage",
            "\t\texit 0",
            "\t\t;;",
            "\t--)",
            "\t\tshift",
            "\t\tbreak",
            "\t\t;;",
            "\t*)",
            "\t\techo \"\\$0: invalid option -- '\\$1'\"",
            "\t\techo \"Try '\\$0 --help' for more information\"",
            "\t\texit 1",
            "\t\t;;",
            "\tesac",
            "done",
            ""
        ],
        "description": "getopt from argument"
    },
    "getopts": {
        "prefix": "getopts",
        "body": [
            "usage() {",
            "\techo \"Usage: \\$0 [OPTION]...\"",
            "\techo \"-a, --along               option a\"",
            "\techo \"-b bvalue, --blong=bvalue\toption b\"",
            "\techo \"-h                        help\"",
            "}",
            "",
            "# `:` before the option indicate ingore error",
            "# `:` after the option indicate it has a argument",
            "while getopts \"${1::a:bh}\" opt",
            "do",
            "\tcase \\$opt in",
            "\ta)",
            "\t\tA=\\$OPTARG",
            "\t\techo \"option a=\\${a}\"",
            "\t\t;;",
            "\tb)",
            "\t\techo \"option b\"",
            "\t\t;;",
            "\th)",
            "\t\tusage",
            "\t\texit 0",
            "\t\t;;",
            "\tesac",
            "done",
            "",
            "# remove parsed arguments",
            "shift $((OPTIND - 1))",
            ""
        ],
        "description": "getopts from argument"
    },
    "Parse options using while": {
        "prefix": "whileopt",
        "body": [
            "while [[ \\$# -gt 0 ]]; do",
            "\tcase \"\\$1\" in",
            "\t${1:-v | --version})",
            "\t\t${2:ver}=\"\\$2\"",
            "\t\tshift 2",
            "\t\t;;",
            "\t-h | --help)",
            "\t\tshow_help",
            "\t\texit 0",
            "\t\t;;",
            "\tesac",
            "done"
        ],
        "description": "Parse options using while"
    },
    "map": {
        "prefix": "map",
        "body": [
            "declare -A ${1:hashmap}",
            "$1['hello']='world'"
        ],
        "description": "declare a hashmap"
    },
    "formapk": {
        "prefix": "formapk",
        "body": [
            "for ${2:key} in \"\\${!${1:hashmap}[@]}\"",
            "do",
            "\techo ${3:\\${$1[\\$$2]}}",
            "done"
        ],
        "description": "map for key"
    },
    "formapv": {
        "prefix": "formapv",
        "body": [
            "for ${2:value} in \"\\${${1:hashmap}[@]}\"",
            "do",
            "\techo \\$$2",
            "done"
        ],
        "description": "map for value"
    }
}
